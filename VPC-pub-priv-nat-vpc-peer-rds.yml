Description: > 
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet and NAT gateway, with a default
  route on the public subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Test/Dev

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.8.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private subnet in the first Availability Zone
    Type: String
    Default: 10.0.1.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private subnet in the second Availability Zone
    Type: String
    Default: 10.0.9.0/24
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  CreateVPCPeering:
    Description: Create VPC peering?
    Type: String
    Default: "False"
    AllowedValues: 
      - "True"
      - "False"

  PeeredVPCID:
    Description: ID of the VPC to be peered
    Type: String
    Default: "To be defined"

  PeeredVPCRegion:
    Description: Region of the VPC to be peered
    Type: String
    Default: "To be defined"
  
  PeeredVPCCIDR:
    Description: CIDR of the VPC to be peered
    Type: String
    Default: '196.168.0.0/16'
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions: 
  CreateVPCPeeering: !Equals [ !Ref CreateVPCPeering, "True" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes (AZ1)

  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes (AZ2)

  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2
  

  EIPNatGateway1:
    Type: AWS::EC2::EIP

  EIPNatGateway2:
    Type: AWS::EC2::EIP

  NATGatewayPublicSubnet1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
        - EIPNatGateway1
        - AllocationId
      SubnetId: !Ref PublicSubnet1 # not required. The id of the subnet to create the NAT Gateway in. This is required with the present option.

  NATGatewayPublicSubnet2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId:
        Fn::GetAtt:
        - EIPNatGateway2
        - AllocationId
      SubnetId: !Ref PublicSubnet2 # not required. The id of the subnet to create the NAT Gateway in. This is required with the present option.

  PrivateRouteTable1: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)
  
  PrivateRouteTable2: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultRoutePrivateSubnet1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayPublicSubnet1

  DefaultRoutePrivateSubnet2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGatewayPublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2


  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: no-ingress-sg

  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "http-sg"
      GroupDescription: "Security group with HTTP rule"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: http-sg

  HTTPPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "http-sg-private"
      GroupDescription: "Security group with HTTP rule"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          # CidrIp: 0.0.0.0/0 
          SourceSecurityGroupId: !Ref HTTPSecurityGroup
      Tags:
        - Key: Name
          Value: http-sg-private

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "ssh-sg"
      GroupDescription: "Security group with SSH rule"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
      Tags:
        - Key: Name
          Value: ssh-sg

  OpenBarSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "openbar-sg"
      GroupDescription: "Security group with OpenBar rule"
      VpcId: !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: -1
          # FromPort: 0
          # ToPort: 6553
          CidrIp: 0.0.0.0/0 
      Tags:
          - Key: Name
            Value: openbar-sg


  VPCPeeringConnection:
    Type: 'AWS::EC2::VPCPeeringConnection'
    Condition: CreateVPCPeeering
    Properties:
      VpcId: !Ref VPC
      PeerRegion: !Ref PeeredVPCRegion
      PeerVpcId: !Ref PeeredVPCID

  PeeredVPCRoutePrivateSubnet1:
    Type: AWS::EC2::Route
    Condition: CreateVPCPeeering
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: !Ref PeeredVPCCIDR
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection

  PeeredVPCRoutePrivateSubnet2:
    Type: AWS::EC2::Route
    Condition: CreateVPCPeeering
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: !Ref PeeredVPCCIDR
      VpcPeeringConnectionId:
        Ref: VPCPeeringConnection
      

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the Private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the Private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  HTTPSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref HTTPSecurityGroup
  
  HTTPPrivateSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref HTTPPrivateSecurityGroup

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
  
  OpenBarSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref OpenBarSecurityGroup